function [neuron,mse]=register_neurons_ind(neuron,base_template,base_template_norm,template,template_norm,normalize,registration_method)
if normalize
    template=template_norm;
    base_template=base_template_norm;
end

R=imref2d(neuron.imageSize);
ref_temp=template;
[optimizer, metric]=imregconfig('monomodal');
iter=1;
registrations={};
curr_template=template;
curr_mse=MSE_registration_metric(curr_template,base_template);
while iter<=length(registration_method);
    if isequal(registration_method{iter},'translation')||isequal(registration_method{iter},'affine')
        
        registration=registration2d(base_template,template,'transformationModel',registration_method{iter});
        test2=deformation(curr_template,registration.displacementField,registration.interpolation);
        try
            tform=imregtform(curr_template,base_template,registration_method{iter},optimizer,metric);
            test1=imwarp(curr_template,tform,'OutputView',R);
        catch
            warning('Requires image processing toolbox, defaulting to alternate registration method')
            test2=test;
            tform=registration;
        end
    elseif isequal(registration_method{iter},'rigid')||isequal(registration_method{iter},'similarity')
        try
            tform=imregtform(curr_template,base_template,registration_method{iter},optimizer,metric);
            test1=imwarp(curr_template,tform,'OutputView',R);
            registration=tform;
            test2=test1;
        catch
            warning('Requires image processing toolbox')
            test1=curr_template;
            test2=test1;
            tform=[];
            registration=[];
        end
    elseif isequal(registration_method{iter},'non-rigid')
        registration=registration2d(base_template,template,'transformationModel',registration_method{iter});
        test2=deformation(curr_template,registration.displacementField,registration.interpolation);
        tform=registration;
        test1=test2;
    else
        warning('Invalid registration method, ignoring current registration')
    end
        
        
        
    mse1=MSE_registration_metric(test1,base_template);
    mse2=MSE_registration_metric(test2,base_template);
    [~,I]=min([curr_mse,mse1,mse2]);
    if I==2
        registrations{end+1}=tform;
        curr_template=test1;
        curr_mse=mse1;
    elseif I==3
        registrations{end+1}=registration;
        curr_template=test2;
        curr_mse=mse2;
        
    end
    iter=iter+1;
end
        
for k=length(registrations):-1:1
    if isempty(registrations{k})
        registrations(k)=[];
    end
end



% try
%             [optimizer, metric] = imregconfig('monomodal');
%             if ~isequal(registration_method,'non-rigid')
%                 tform_a=imregtform(template,base_template,'rigid',optimizer,metric);
%                 template=imwarp(template,tform_a,'OutputView',R);
%                 
%                 tform_b=imregtform(template,base_template,registration_method,optimizer,metric);
%                 template=imwarp(template,tform_b,'OutputView',R);
%                 
%                 tform1=affine2d;
%                 tform1.T=tform_a.T*tform_b.T;
%                 
%                 
%                 registration2=[];
%                 %template_norm=imwarp(template_norm,tform1,'OutputView',R);
%                 mse1=MSE_registration_metric(template,base_template);
%             else
%                 
%                 tform_a=imregtform(template,base_template,'rigid',optimizer,metric);
%                 template=imwarp(template,tform_a,'OutputView',R);
%                 
%                 tform_b=imregtform(template,base_template,'rigid',optimizer,metric);
%                 template=imwarp(template,tform_b,'OutputView',R);
%                 
%                 
%                 tform1=affine2d;
%                 tform1.T=tform_a.T*tform_b.T;
%                 
%                 registration2=registration2d(base_template,template,'transformationModel',registration_method);
%                 template=deformation(template,registration2.displacementField,registration2.interpolation);
%                 %template_norm=deformation(template_norm,registration2.displacementField,registration2.interpolation);
%                 
%                 mse1=MSE_registration_metric(template,base_template);
%             end
% catch
%     mse1=[];
% end
% template=ref_temp;
% try
%      registration1=registration2d(base_template,template,'transformationModel','translation');
%      template=imtranslate(template,-1*[registration1.transformationMatrix(1,3), registration1.transformationMatrix(2,3)],'FillValues',0);
%      %template_norm=imtranslate(template_norm,-1*[registration1.transformationMatrix(1,3), registration1.transformationMatrix(2,3)],'FillValues',0);
%      
%      
%      registration2=registration2d(base_template,template,'transformationModel',registration_method);
%      template=deformation(template,registration2.displacementField,registration2.interpolation);
%      %template_norm=deformation(template_norm,registration2.displacementField,registration2.interpolation);
%      mse2=MSE_registration_metric(template,base_template);
% catch
%     mse2=[];
% end
% if isempty(mse2)&~isempty(mse1)
%     mse2=mse1*2;
% elseif isempty(mse1)&~isempty(mse2)
%     mse1=mse2*2;
% elseif isempty(mse1)&isempty(mse2)
%     warning('Registration Failed')
%     mse=0;
%     return
% end
% 
% if mse1<=mse2
%    
%     mse=mse1;
%     temp_A=reshape(neuron.A,neuron.imageSize(1),neuron.imageSize(2),[]);
%     parfor j=1:size(neuron.A,2)
%         temp_A(:,:,j)=imwarp(temp_A(:,:,j),tform1,'OutputView',R);
%         if isequal(registration_method,'non-rigid')
% 
%             temp_A(:,:,j)=deformation(temp_A(:,:,j),registration2.displacementField,registration2.interpolation);
%         end
%     end   
% elseif mse2<mse1
%     
% 
% 
%     mse=mse2;
%   
%     
% 
%     temp_A=reshape(neuron.A,neuron.imageSize(1),neuron.imageSize(2),[]);
%     parfor j=1:size(neuron.A,2)
%         temp_A(:,:,j)=imtranslate(temp_A(:,:,j),-1*[registration1.transformationMatrix(1,3), registration1.transformationMatrix(2,3)],'FillValues',0);
%         temp_A(:,:,j)=deformation(temp_A(:,:,j),registration2.displacementField,registration2.interpolation);
%     end
% end
% neuron.A=reshape(temp_A,neuron.imageSize(1)*neuron.imageSize(2),[]);
% neuron.A(neuron.A<10^(-6))=0;
temp_A=reshape(neuron.A,neuron.imageSize(1),neuron.imageSize(2),[]);
parfor j=1:size(neuron.A,2)
    for k=1:length(registrations)
        if isequal(class(tform),'affine2d')
            
        elseif
    end
end
